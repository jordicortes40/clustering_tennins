return(P-alpha)
}
cp_pocock <- c()
for(k in 2:5){
cp_pocock[k-1] <- uniroot(p_pocock, interval = c(1,10),k=k,alpha=0.05)$root
}
p_pocock <- function(cp,k,alpha=0.05,type='pocock'){ # c('pocock','obf')
# correlation matrix
Nk <- (1:k) * (1/k) # ratios assuming equal sizes
corr <- diag(1,k)
for(i in 1:(k-1)){
for(j in i:k){
corr[i,j] <- corr[j,i] <- sqrt(Nk[i]/Nk[j]) # correlations
}
}
# Probability of rejecting at each interim for sobrepassing upper limit
p_upp <- c()
for(kk in 1:k){
if(type=='obf'){
crit_point <- cp/sqrt(1:k) # O brien Flemming
low <- c(rep(-Inf,kk-1),crit_point[kk])
upp <- c(crit_point[1:(kk-1)],Inf)
}else{
crit_point <- cp          # Pocock
low <- c(rep(-Inf,kk-1),crit_point)
upp <- c(rep(crit_point,kk-1),Inf)
}
if(kk==1){
if(type=='obf'){
p_low[kk] <- pnorm(-crit_point[kk])
}else{
p_low[kk] <- pnorm(-crit_point)
}
}else{
p_upp[kk] <- pmvnorm(lower = low, upper = upp, corr = corr[1:kk,1:kk])
}
}
# Probability of rejecting at each interim for underpassing lower limit
p_low <- c()
for(kk in 1:k){
if(type=='obf'){
crit_point <- cp/sqrt(1:k) # O brien Flemming
low <- c(-crit_point[1:(kk-1)],-Inf)
upp <- c(rep(Inf,kk-1),-crit_point[kk])
}else{
crit_point <- cp          # Pocock
low <- c(rep(-crit_point,kk-1),-Inf)
upp <- c(rep(Inf,kk-1),-crit_point)
}
if(kk==1){
if(type=='obf'){
p_low[kk] <- pnorm(-crit_point[kk])
}else{
p_low[kk] <- pnorm(-crit_point)
}
}else{
p_low[kk] <- pmvnorm(lower = low, upper = upp, corr = corr[1:kk,1:kk])
}
}
P <- sum(p_low+p_upp) # Probability of rejecting at any interim
return(P-alpha)
}
cp_pocock <- c()
for(k in 2:5){
cp_pocock[k-1] <- uniroot(p_pocock, interval = c(1,10),k=k,alpha=0.05)$root
}
p_pocock <- function(cp,k,alpha=0.05,type='pocock'){ # c('pocock','obf')
# correlation matrix
Nk <- (1:k) * (1/k) # ratios assuming equal sizes
corr <- diag(1,k)
for(i in 1:(k-1)){
for(j in i:k){
corr[i,j] <- corr[j,i] <- sqrt(Nk[i]/Nk[j]) # correlations
}
}
# Probability of rejecting at each interim for sobrepassing upper limit
p_upp <- c()
for(kk in 1:k){
if(type=='obf'){
crit_point <- cp/sqrt(1:k) # O brien Flemming
low <- c(rep(-Inf,kk-1),crit_point[kk])
upp <- c(crit_point[1:(kk-1)],Inf)
}else{
crit_point <- cp          # Pocock
low <- c(rep(-Inf,kk-1),crit_point)
upp <- c(rep(crit_point,kk-1),Inf)
}
if(kk==1){
if(type=='obf'){
p_upp[kk] <- pnorm(-crit_point[kk])
}else{
p_upp[kk] <- pnorm(-crit_point)
}
}else{
p_upp[kk] <- pmvnorm(lower = low, upper = upp, corr = corr[1:kk,1:kk])
}
}
# Probability of rejecting at each interim for underpassing lower limit
p_low <- c()
for(kk in 1:k){
if(type=='obf'){
crit_point <- cp/sqrt(1:k) # O brien Flemming
low <- c(-crit_point[1:(kk-1)],-Inf)
upp <- c(rep(Inf,kk-1),-crit_point[kk])
}else{
crit_point <- cp          # Pocock
low <- c(rep(-crit_point,kk-1),-Inf)
upp <- c(rep(Inf,kk-1),-crit_point)
}
if(kk==1){
if(type=='obf'){
p_low[kk] <- pnorm(-crit_point[kk])
}else{
p_low[kk] <- pnorm(-crit_point)
}
}else{
p_low[kk] <- pmvnorm(lower = low, upper = upp, corr = corr[1:kk,1:kk])
}
}
P <- sum(p_low+p_upp) # Probability of rejecting at any interim
return(P-alpha)
}
cp_pocock <- c()
for(k in 2:5){
cp_pocock[k-1] <- uniroot(p_pocock, interval = c(1,10),k=k,alpha=0.05)$root
}
uniroot(p_pocock, interval = c(1,10),k=4,alpha=0.05,type='obf')$root
kable(data.frame(K=2:5,
cp=round(cp_pocock,3),
alpha=round(2*(1-pnorm(cp_pocock)),4)),
col.names = c('K','Cutpoint','Alpha'))
obf_bound <- list()
for(k in 2:5){
cp <- uniroot(p_pocock, interval = c(1,10),k=4,alpha=0.05,type='obf')$root
obf_bound[[k-1]] <- cp/sqrt(1:k)
}
obf_bound
obf_bound <- list()
for(k in 2:5){
cp <- uniroot(p_pocock, interval = c(1,10),k=k,alpha=0.05,type='obf')$root
obf_bound[[k-1]] <- cp/sqrt(1:k)
}
obf_bound <- list()
for(k in 2:5){
cp <- uniroot(p_pocock, interval = c(1,10),k=k,alpha=0.05,type='obf')$root
obf_bound[[k-1]] <- cp/sqrt(1:k)
}
print(obf_bound)
uniroot(get_boundaries, interval = c(1,10),k=4,alpha=0.10,type='obf')$root
obf_bound <- list()
for(k in 2:5){
cp <- uniroot(get_boundaries, interval = c(1,10),k=k,alpha=0.05,type='obf')$root
obf_bound[[k-1]] <- cp/sqrt(1:k)
}
uniroot(get_boundaries, interval = c(1,10),k=4,alpha=0.10,type='obf')$root
library(ggplot2)
path_agr <- 'C:/Users/jcortes/My Drive/Docencia/TFM TFG/ZZZ_OLD/TFG_Sara_Pascasi_Tennis/Dades/agregades_brutes/'
path_rep <- 'C:/Users/jcortes/My Drive/Docencia/TFM TFG/ZZZ_OLD/TFG_Sara_Pascasi_Tennis/Dades/Reports/'
path_fig <- 'C:/Users/jcortes/My Drive/Docencia/TFM TFG/ZZZ_OLD/TFG_Sara_Pascasi_Tennis/Dades/Reports/figures/'
TOURNAMENTS <- c('ausopen','frenchopen','wimbledon','usopen')
setwd(path_agr)
##-- Exploration
year <- 2020
dd2 <- read.table(paste0('d_agr_',year,'.txt'),header = TRUE)
dd2$genere <- factor(substr(dd2$matchnum, 1, 1))
dd2$ratio <- dd2$P1Dist/dd2$RallyCount
hist(dd2$ratio,br=20)
##-- match_id
dd2$match_id[!is.na(dd2$up) & dd2$up=='high_ratio']
dd2$match_id[!is.na(dd2$up) & dd2$up=='low_ratio']
# genere
barplot(prop.table(table(dd2$up,dd2$Genere),2))
year <- 2020
dd2 <- read.table(paste0('d_agr_',year,'.txt'),header = TRUE)
dd2$genere <- factor(substr(dd2$matchnum, 1, 1))
dd2$ratio <- dd2$P1Dist/dd2$RallyCount
hist(dd2$ratio,br=20)
cutpoint <- ifelse(year==2016,5.5,ifelse(year==2016,5,5))
dd2$up <- ifelse(dd2$ratio>cutpoint,'high_ratio','low_ratio')
##-- match_id
dd2$match_id[!is.na(dd2$up) & dd2$up=='high_ratio']
dd2$match_id[!is.na(dd2$up) & dd2$up=='low_ratio']
# genere
barplot(prop.table(table(dd2$up,dd2$Genere),2))
# torneig
barplot(prop.table(table(dd2$up,dd2$Slam),2))
table(dd2$up,dd2$Slam,useNA = 'ifany')
dd2
##-- match_id
dd2$match_id[!is.na(dd2$up) & dd2$up=='high_ratio']
dd2$match_id[!is.na(dd2$up) & dd2$up=='low_ratio']
hist(dd2$ratio,br=20)
rm(list=ls())
##-- Load packages -------------------------------------------------------------
library(data.table)
library(ggplot2)
##-- Paths ---------------------------------------------------------------------
path_des <- 'C:/Users/jcortes/My Drive/Docencia/TFM TFG/ZZZ_OLD/TFG_Sara_Pascasi_Tennis/Dades/desagregades/'
path_agr <- 'C:/Users/jcortes/My Drive/Docencia/TFM TFG/ZZZ_OLD/TFG_Sara_Pascasi_Tennis/Dades/agregades_brutes/'
path_fig <- 'C:/Users/jcortes/My Drive/Docencia/TFM TFG/ZZZ_OLD/TFG_Sara_Pascasi_Tennis/Dades/Reports/figures/'
path_rep <- 'C:/Users/jcortes/My Drive/Docencia/TFM TFG/ZZZ_OLD/TFG_Sara_Pascasi_Tennis/Dades/Reports/'
setwd(path_des)
# ------------------------------------------------------------------------------
# REGISTRES
# ------------------------------------------------------------------------------
##-- AGREGAR REGISTRES ---------------------------------------------------------
YEARS <- 2011:2021
for(year in YEARS){
file_name  <- paste0('registres_',year,'.txt')
d_reg_temp <- read.table(file_name, header = TRUE, sep = ' ')
d_reg_temp$tournament <- rownames(d_reg_temp)
d_reg_temp$year       <- year
if(year==YEARS[1]){
d_reg <- d_reg_temp
} else{
d_reg <- rbind(d_reg,d_reg_temp)
}
}
d_reg$tournament <- factor(d_reg$tournament,
levels=c('ausopen','frenchopen',
'wimbledon','usopen'))
##-- DESCRIPTIVA REGISTRES -----------------------------------------------------
# PLOT ROWS
ggplot(d_reg,aes(x = year,y = row_d, colour = tournament)) +
geom_line() +
geom_point() +
facet_wrap(.~tournament) +
xlab('Year') + ylab('Number of Registers') +
scale_color_manual(values=c('grey','brown','darkgreen','darkblue'))+
theme(legend.position = 'none')
file_name <- paste0(path_fig,'registres.png')
ggsave(filename = file_name, width = 4.5, height = 3)
# PLOT COLUMNS
ggplot(d_reg,aes(x = year,y = col_d, colour = tournament)) +
geom_line() +
geom_point() +
facet_wrap(.~tournament) +
xlab('Year') + ylab('Number of Columns') +
scale_color_manual(values=c('grey','brown','darkgreen','darkblue'))+
theme(legend.position = 'none')
file_name <- paste0(path_fig,'variables.png')
ggsave(filename = file_name, width = 4.5, height = 3)
# -----------------
# ------------------------------------------------------------------------------
# AGREGAR DADES
# ------------------------------------------------------------------------------
##-- Parametres ----------------------------------------------------------------
VARS <- c('RallyCount',
'P1DistanceRun','P2DistanceRun',
'ServeNumber','ServeIndicator',
'Speed_KMH')
TOURNAMENTS <- c('ausopen','frenchopen','wimbledon','usopen')
TYPE <- c('perc_missing','perc_zero','perc_total')    # Indicadors: perc_total = perc_zero + perc_missing
missings_dades0 <- expand.grid(VARS,TOURNAMENTS,TYPE) # YEARS
colnames(missings_dades0) <- c('vars','tournament','type')
missings_dades0$value <- NA
##-- Agregar dades -------------------------------------------------------------
ini <- TRUE
year=2019
print(year)
fitxer <- paste0("d_", year, ".txt")
bb     <- read.table(fitxer, header = TRUE, sep= " ")
dd     <- as.data.table(bb)
summary(dd)
##-- Exploration
year <- 2021
dd2 <- read.table(paste0('d_agr_',year,'.txt'),header = TRUE)
##-- Exploration
year <- 2021
dd2 <- read.table(paste0('d_agr_',year,'.txt'),header = TRUE)
setwd("C:/Users/jcortes/My Drive/Docencia/TFM TFG/ZZZ_OLD/TFG_Sara_Pascasi_Tennis/Scripts/Jordi")
rm(list=ls())
##-- Load packages -------------------------------------------------------------
library(data.table)
library(ggplot2)
##-- Paths ---------------------------------------------------------------------
path_des <- 'C:/Users/jcortes/My Drive/Docencia/TFM TFG/ZZZ_OLD/TFG_Sara_Pascasi_Tennis/Dades/desagregades/'
path_agr <- 'C:/Users/jcortes/My Drive/Docencia/TFM TFG/ZZZ_OLD/TFG_Sara_Pascasi_Tennis/Dades/agregades_brutes/'
path_fig <- 'C:/Users/jcortes/My Drive/Docencia/TFM TFG/ZZZ_OLD/TFG_Sara_Pascasi_Tennis/Dades/Reports/figures/'
path_rep <- 'C:/Users/jcortes/My Drive/Docencia/TFM TFG/ZZZ_OLD/TFG_Sara_Pascasi_Tennis/Dades/Reports/'
setwd(path_des)
# ------------------------------------------------------------------------------
# REGISTRES
# ------------------------------------------------------------------------------
##-- AGREGAR REGISTRES ---------------------------------------------------------
YEARS <- 2011:2021
for(year in YEARS){
file_name  <- paste0('registres_',year,'.txt')
d_reg_temp <- read.table(file_name, header = TRUE, sep = ' ')
d_reg_temp$tournament <- rownames(d_reg_temp)
d_reg_temp$year       <- year
if(year==YEARS[1]){
d_reg <- d_reg_temp
} else{
d_reg <- rbind(d_reg,d_reg_temp)
}
}
d_reg$tournament <- factor(d_reg$tournament,
levels=c('ausopen','frenchopen',
'wimbledon','usopen'))
##-- DESCRIPTIVA REGISTRES -----------------------------------------------------
# PLOT ROWS
ggplot(d_reg,aes(x = year,y = row_d, colour = tournament)) +
geom_line() +
geom_point() +
facet_wrap(.~tournament) +
xlab('Year') + ylab('Number of Registers') +
scale_color_manual(values=c('grey','brown','darkgreen','darkblue'))+
theme(legend.position = 'none')
file_name <- paste0(path_fig,'registres.png')
ggsave(filename = file_name, width = 4.5, height = 3)
# PLOT COLUMNS
ggplot(d_reg,aes(x = year,y = col_d, colour = tournament)) +
geom_line() +
geom_point() +
facet_wrap(.~tournament) +
xlab('Year') + ylab('Number of Columns') +
scale_color_manual(values=c('grey','brown','darkgreen','darkblue'))+
theme(legend.position = 'none')
file_name <- paste0(path_fig,'variables.png')
ggsave(filename = file_name, width = 4.5, height = 3)
# ------------------------------------------------------------------------------
# AGREGAR DADES
# ------------------------------------------------------------------------------
##-- Parametres ----------------------------------------------------------------
VARS <- c('RallyCount',
'P1DistanceRun','P2DistanceRun',
'ServeNumber','ServeIndicator',
'Speed_KMH')
TOURNAMENTS <- c('ausopen','frenchopen','wimbledon','usopen')
TYPE <- c('perc_missing','perc_zero','perc_total')    # Indicadors: perc_total = perc_zero + perc_missing
missings_dades0 <- expand.grid(VARS,TOURNAMENTS,TYPE) # YEARS
colnames(missings_dades0) <- c('vars','tournament','type')
missings_dades0$value <- NA
##-- Agregar dades -------------------------------------------------------------
ini <- TRUE
for(year in YEARS){
print(year)
fitxer <- paste0("d_", year, ".txt")
bb     <- read.table(fitxer, header = TRUE, sep= " ")
dd     <- as.data.table(bb)
if(!'RallyCount' %in% names(dd)) dd$RallyCount <- dd$Rally
if(!'P1DistanceRun' %in% names(dd)){
dd$P1DistanceRun <- NA
dd$P2DistanceRun <- NA
}
if(!'ServeNumber' %in% names(dd)){
dd$ServeNumber <- NA
}
##-- Indicadors de dades mancants ********************************************
miss_temp <- missings_dades0
miss_temp$year <- year
n_row <- nrow(miss_temp)
for(i in 1:n_row){
v  <- miss_temp$vars[i]
to <- miss_temp$tournament[i]
ty <- miss_temp$type[i]
sel_miss <- miss_temp$vars       == v  &
miss_temp$tournament == to &
miss_temp$type       == ty
sel_dd   <- dd$slam == to
if(ty==TYPE[1]){
miss_temp$value[sel_miss] <- 100*sum(is.na(dd[sel_dd,v,with=FALSE]) |
dd[sel_dd,v,with=FALSE]=='',na.rm=TRUE)/nrow(dd[sel_dd,])
}
if(ty==TYPE[2]){
miss_temp$value[sel_miss] <- 100*sum(dd[sel_dd,v,with=FALSE]==0 |
dd[sel_dd,v,with=FALSE]=='0',na.rm=TRUE)/nrow(dd[sel_dd,])
}
if(ty==TYPE[3]){
# es sumen els dos anteriors
miss_temp$value[sel_miss] <- 100*sum(is.na(dd[sel_dd,v,with=FALSE]) |
dd[sel_dd,v,with=FALSE]=='',na.rm=TRUE)/nrow(dd[sel_dd,]) +
100*sum(dd[sel_dd,v,with=FALSE]==0 |
dd[sel_dd,v,with=FALSE]=='0',na.rm=TRUE)/nrow(dd[sel_dd,])
}
}
if(ini){
miss <- miss_temp
ini  <- FALSE
}else{
miss <- rbind(miss,miss_temp)
}
##-- FINAL Indicadors de dades mancants **************************************
dd$distance_exist_1 <- 1-as.numeric(dd$P1DistanceRun == 0 | is.na(dd$P1DistanceRun))
dd$distance_exist_2 <- 1-as.numeric(dd$P2DistanceRun == 0 | is.na(dd$P2DistanceRun))
dd$points           <- as.numeric(dd$PointsNumber)
#### agreguem les dades per partit (match_id)
dd2= dd[ , .(RallyCount   = sum(RallyCount, na.rm= T),
P1Dist       = .N * (sum(P1DistanceRun, na.rm= T)/sum(distance_exist_1)),
P2Dist       = .N * (sum(P2DistanceRun, na.rm= T)/sum(distance_exist_2)),
Point        = .N,
Speed        = mean(Speed_KMH[Speed_KMH !=0], na.rm= T),
Speed1       = mean(Speed_KMH[Speed_KMH !=0 & ServeIndicator == 1], na.rm = TRUE),
Speed2       = mean(Speed_KMH[Speed_KMH !=0 & ServeIndicator == 2], na.rm = TRUE),
PrimerServei1= sum(ServeNumber == 1 & ServeIndicator == 1, na.rm= T),
SegonServei1 = sum(ServeNumber == 2 & ServeIndicator == 1, na.rm= T),
DobleFalta1  = sum(ServeNumber == 0 & ServeIndicator == 1, na.rm= T),
PrimerServei2= sum(ServeNumber == 1 & ServeIndicator == 2, na.rm= T),
SegonServei2 = sum(ServeNumber == 2 & ServeIndicator == 2, na.rm= T),
DobleFalta2  = sum(ServeNumber == 0 & ServeIndicator == 2, na.rm= T),
Time         = tail(ElapsedTime, n=1),
matchnum     = unique(match_num),
Slam         = unique(slam),
Genere       = substr(unique(match_num), 1, 1),
player1      = tolower(unique(player1)),
player2      = tolower(unique(player2))),
by = match_id]
# fem la transformacio del temps a minuts
dd2$temps_dividit <- strsplit(dd2$Time, ":")
dd2$minuts_totals <- unlist(lapply(dd2$temps_dividit, function(x) {
(as.numeric(x[1]) * 60) + as.numeric(x[2]) + (as.numeric(x[3]) / 60)
}))
# Save data
file_name <- paste0(path_agr,'d_agr_',year,'.txt')
write.table(x         = apply(dd2,2,as.character), # character to avoid problems
file      = file_name,
row.names = FALSE,
col.names = TRUE)
}
##-- Guardar indicadors de dades mancants --------------------------------------
file_name <- paste0(path_agr,'missings.txt')
write.table(x         = miss,
file      = file_name,
row.names = FALSE,
col.names = TRUE)
miss$tournament <- factor(miss$tournament,levels=TOURNAMENTS)
##-- Descriptiva dades mancants ------------------------------------------------
##-- Missings
ggplot(miss[miss$type=='perc_missing',],
aes(x=year,y=value,colour=tournament)) +
geom_line(alpha=0.5) +
geom_point(alpha=0.5) +
facet_wrap(.~vars) +
xlab('Year') + ylab('% missings') +
scale_color_manual(values=c('grey','brown','darkgreen','darkblue'))+
theme(legend.position = 'bottom')
file_name <- paste0(path_fig,'missings.png')
ggsave(filename = file_name, width = 5, height = 3)
##-- Zeros
ggplot(miss[miss$type=='perc_zero',],
aes(x=year,y=value,colour=tournament)) +
geom_line(alpha=0.5) +
geom_point(alpha=0.5) +
facet_wrap(.~vars) +
xlab('Year') + ylab('% zeros') +
scale_color_manual(values=c('grey','brown','darkgreen','darkblue'))+
theme(legend.position = 'bottom')
file_name <- paste0(path_fig,'zeros.png')
ggsave(filename = file_name, width = 5, height = 3)
##-- Missings i zeros
ggplot(miss[miss$type=='perc_total',],
aes(x=year,y=value,colour=tournament)) +
geom_line(alpha=0.5) +
geom_point(alpha=0.5) +
facet_wrap(.~vars) +
xlab('Year') + ylab('% zeros or missings') +
scale_color_manual(values=c('grey','brown','darkgreen','darkblue'))+
theme(legend.position = 'bottom')
file_name <- paste0(path_fig,'zeros_missings.png')
ggsave(filename = file_name, width = 5, height = 3)
# ------------------------------------------------------------------------------
# DESCRIPTIVA RALLY COUNT VS DISTANCE YEARS 2016 VS 2021
# ------------------------------------------------------------------------------
library(ggplot2)
path_agr <- 'C:/Users/jcortes/My Drive/Docencia/TFM TFG/ZZZ_OLD/TFG_Sara_Pascasi_Tennis/Dades/agregades_brutes/'
path_rep <- 'C:/Users/jcortes/My Drive/Docencia/TFM TFG/ZZZ_OLD/TFG_Sara_Pascasi_Tennis/Dades/Reports/'
path_fig <- 'C:/Users/jcortes/My Drive/Docencia/TFM TFG/ZZZ_OLD/TFG_Sara_Pascasi_Tennis/Dades/Reports/figures/'
TOURNAMENTS <- c('ausopen','frenchopen','wimbledon','usopen')
setwd(path_agr)
for(year in 2016:2021){
print(year)
dd2 <- read.table(paste0('d_agr_',year,'.txt'),header = TRUE)
dd2$genere <- factor(substr(dd2$matchnum, 1, 1))
dd2$up <- as.numeric(dd2$P1Dist/dd2$RallyCount>5.5)
dd2$Slam <- factor(dd2$Slam,levels=TOURNAMENTS)
# slope_1 <- coef(lm(P1Dist~RallyCount,dd2[dd2$up==1,]))[2]
# slope_0 <- coef(lm(P1Dist~RallyCount,dd2[dd2$up==0,]))[2]
# slope_1/slope_0
gg <- ggplot(dd2,aes(x=RallyCount,y=P1Dist,col=Slam)) +
geom_point(alpha=0.6) +
xlab('Shot count') + ylab('Distance') + ggtitle(year) +
scale_color_manual(breaks = TOURNAMENTS,
values=c('grey','brown','darkgreen','darkblue'))
assign(paste0('gg_',year),gg)
file_name <- paste0(path_fig,'rally_distance_',year,'.png')
ggsave(filename = file_name, plot = gg, width = 5, height = 3)
# par(mfrow=c(1,2))
# plot(dd2$P1Dist~dd2$RallyCount,main=year,
#      col=dd2$genere,xlim=c(0,2100))
# plot(dd2$P1Dist~dd2$RallyCount,main=year,
#      col=as.numeric(factor(dd2$Slam)),xlim=c(0,2100))
#plot(dd2$P2Dist~dd2$RallyCount,col=dd2$up+1)
}
save.image(file = paste0(path_rep,'dades.Rdata'))
##-- Exploration
year <- 2021
dd2 <- read.table(paste0('d_agr_',year,'.txt'),header = TRUE)
dd2$genere <- factor(substr(dd2$matchnum, 1, 1))
dd2$ratio <- dd2$P1Dist/dd2$RallyCount
hist(dd2$ratio,br=20)
cutpoint <- ifelse(year==2016,5.5,ifelse(year==2016,5,5))
dd2$up <- ifelse(dd2$ratio>cutpoint,'high_ratio','low_ratio')
which.max(dd2$ratio)
dd2[930,]
8379.757/584
which.max(dd2$ratio[dd2$genere==1])
dd2[dd2$genere==1,][215,]
d <- (27,61,16,46,54,15,59,17)
d <- c(27,61,16,46,54,15,59,17)
r <- c(8,2,8,12,1,11,2,2)
d/r
